
	//-- Globals
	
	var errMsgNotResponding = 'El <b>Server Back Office</b> no responde.<br><br>\
								Por favor intente m&aacute;s tarde.';

	var errMsgNotFound = 'El <b>Server Back Office</b> no fue encontrado.<br><br>\
							Por favor avise al administrador.';

	var errMsgOffline = '<b>No hay conexi&oacute;n con la red</b>.<br>\
							<br>Por favor verifique su dispositivo.';
							
	var errMsgTimeout = '<b>Se ha superado el tiempo de espera</b>.<br>\
							<br>Se intentar&aacute; de nuevo de forma autom&aacute;tica.';
	
	var errMsgTimeoutExhausted = '<b>Se ha superado el tiempo de espera</b>.<br>\
							<br>La comunicaci&oacute;n no ha sido posible. Por favor intente m&aacute;s tarde.';
							
	var errMsgNotSuccess = '<b>No se ejecut&oacute; la operaci&oacute;n</b>.<br>\
							<br>Por favor intente m&aacute;s tarde.';
							
	var errMsgChkTrans = '<b>Operaci&oacute;n exitosa</b>.<br>\
							<br>Por favor verifique el resultado.';
	
	var gTimeOut = 5 * 10000; // 45 seconds in milliseconds
	var gTimeOutLong = 9 * 10000; // 1.5 minutes in milliseconds
	
	var gCounterLim = 5;


	// Functions
	
	function prCounter(prFunction, prFunctionStr)
	{
		if (typeof prFunction.counter == 'undefined' )
			prFunction.counter = 0;
		else 
			prFunction.counter++;
		if (prFunction.counter >= gCounterLim) {
			prFunction.counter = 0;
			prShowMssgAll('01', 'danger', 'Error', errMsgNotResponding, prFunctionStr.name);
			return;
		}
	} // prCounter
	
	function fnCounter(prFunction, prFunctionStr, pID, pData = {})
	{
		var lContinue = true;
		
		if (typeof prFunction.counter == 'undefined' )
			prFunction.counter = 0;
		else 
			prFunction.counter++;
		if (prFunction.counter >= gCounterLim) {
			prFunction.counter = 0;
			if (prFunctionStr == 'prExecRegCB') {
				guardarAccionFallidaParaSubirlaDespues(pData);
			}
			prShowMssgAll(pID, 'danger', 'Error', errMsgNotResponding, prFunctionStr.name);
			lContinue = false;
		}
		
		return lContinue;
	} // fnCounter
	
	function prOpenLoading()
	{
		$('#MyModal').css('top', $(window).height() / 2 - 80);
		$('#MyModal').css('left', $(window).width() / 2 - 80);
		
		$('#MyModal').show();
		$('#MyFade').show();
	} // prOpenLoading

	function prCloseLoading()
	{
		$('#MyModal').hide();
		$('#MyFade').hide();
	} // prCloseLoading

	function prOpenExternalPanel()
	{		
		$('#MyModalPanel').show();
	} // prOpenExternalPanel

	function prCloseExternalPanel()
	{
		var modal = document.getElementById("MyModalPanel");
		modal.style.display = "none";
	} // prCloseExternalPanel
	
	function prSleep(pMS)
	{
		var lStart = new Date().getTime();
		for (var i = 0; i < 1e7; i++) {
			if ((new Date().getTime() - lStart) > pMS) {
				break;
			}
		}
	} // prSleep
	
	function fnGenFolio()
	{
		var lRand = (Math.floor(Math.random() * 26) + Date.now()) + 1;
		var lU = fnGetUser();
		if (lU == '')
			lU = 'nobody';
		var lBitArr = sjcl.hash.sha1.hash(lU + lRand);  
		var lDigest = sjcl.codec.hex.fromBits(lBitArr); 
		return lDigest;
	} // fnGenFolio
	
	function prExecuteChkTransFolio(pFolio, pID)
	{
		if (fnCounter(prExecuteChkTransFolio, 'prExecuteChkTransFolio', pID)) {
			if (navigator.onLine == true) {
				prOpenLoading();
				$.ajax({
					data:		{
						folio:	pFolio,
						action:	'act_chktransfolio'
					},
					url:		gURLApp + "/srvBO.php",
					type:		'POST',
					cache:		false,
					
					success:	function(data, status, xhr) {
						prCloseLoading();
						prExecuteChkTransFolio.counter = 0;
						var lArr = jQuery.parseJSON(data);
						if (lArr) {
							switch (lArr.res) {
								case 0 :
									prShowMssgAll(pID, 'danger', 'Error', errMsgNotSuccess, 'prExecuteChkTransFolio');
									break;
								case 1 :
									prShowMssgAll(pID, 'warning', 'Advertencia', errMsgChkTrans, 'prExecuteChkTransFolio');
									console.log(lArr.folio);
									break;
							}
						}
					}, // success
					
					error:		function(xhr, status, error) {
						prCloseLoading();
						if (status == 'error') {
							if (xhr.status == 404) {
								prShowMssgAll(pID, 'danger', 'Error', errMsgNotFound, 'prExecuteChkTransFolio');
							} else {
								prSleep(500);
								prExecutePOSTCall();
							}
						} else 
						if (status == 'timeout') {
							prShowMssgAll(pID, 'danger', 'Error', errMsgTimeoutExhausted, 'prExecuteChkTransFolio');
						}
					}, // error
					
					timeout:	gTimeOutLong
				});
			} else {
				prShowMssgAll(pID, 'danger', 'Advertencia', errMsgOffline, 'prExecuteChkTransFolio');
			}
		}
	} // prExecuteChkTransFolio
	
	function prExecutePOSTCall(pData, pFunc, pFuncStr, pTimeOut, pID, pNoReply = false)
	{
		if (pData) {
			pData.origin_data = 'web';
			if (fnCounter(prExecutePOSTCall, pFuncStr, pID, pData)) {
				if (navigator.onLine == true) {
					if (pFuncStr != 'prSavedActionCB') {
						prOpenExternalPanel();	
					}
					if (pData.folio == 'yes')
						pData.folio = fnGenFolio();
					if (gDebug) {
						console.log(pFuncStr + " | " + pTimeOut + " | " + pData.folio);
					}
					$.ajax({
						data:		pData,
						url:		gURLApp + "/srvBO.php",
						type:		'POST',
						cache:		false,
						
						success:	function(data, status, xhr) {
							if (pFuncStr != 'prSavedActionCB') {
								prCloseExternalPanel();	
							}
							prExecutePOSTCall.counter = 0;
							console.log(data);
							const checkData = jQuery.parseJSON(data);
							console.log(checkData);
							if (checkData.res == -1001 || checkData.res == -1003) {
								localStorage.clear();
								prSetCredential('tckt', '');
								localStorage.setItem('accept', 'true');
								document.location.href = "index.html";
							} else {
								if (pNoReply) {
									eliminarAccionFallidaPorqueSeCompleto(pData.idRndm);
								}
								pFunc(data);
							}

						}, // success
						
						error:		function(xhr, status, error) {
							if (pFuncStr != 'prSavedActionCB') {
								prCloseExternalPanel();	
							}
							if (status == 'error') {
								if (xhr.status == 404) {
									if (pFuncStr == 'prExecRegCB')
										guardarAccionFallidaParaSubirlaDespues(pData);

									if (pFuncStr != 'prSavedActionCB' && pFuncStr != 'prExecRegCB') {
										prShowMssgAll(pID, 'danger', 'Error', errMsgNotFound + 
										"<br><br><small>ID: <b>404</b></small>", pFuncStr);
									}
								} else 
								if (xhr.status == 500) {
									if (pFuncStr == 'prExecRegCB')
										guardarAccionFallidaParaSubirlaDespues(pData);
									if (pFuncStr != 'prSavedActionCB' && pFuncStr != 'prExecRegCB') {
										prShowMssgAll(pID, 'danger', 'Error', errMsgNotResponding +
										"<br><br><small>ID: <b>500</b></small>", pFuncStr);
									}
									
								} else
								{
									prSleep(500);
									prExecutePOSTCall(pData, pFunc, pFuncStr, pTimeOut, pID);
								}
							} else 
							if (status == 'timeout') {
								if (pData.folio == 'no') {
									if (pTimeOut == gTimeOut) {
										prShowMssg(pID, 'warning', 'Advertencia', errMsgTimeout);
										prExecutePOSTCall(pData, pFunc, pFuncStr, gTimeOutLong);
									} else {
										if (pFuncStr != 'prSavedActionCB' && pFuncStr != 'prExecRegCB') {
											prShowMssgAll(pID, 'danger', 'Error', errMsgTimeoutExhausted, pFuncStr);
										}
									}
								} else {
									prShowMssg(pID, 'warning', 'Advertencia', errMsgTimeout);
									console.log(pData.folio);
									prExecuteChkTransFolio(pData.folio, pID);
								}
							}
						}, // error
						
						timeout:	pTimeOut
					});
				} else {
					prShowMssgAll(pID, 'danger', 'Advertencia', errMsgOffline, pFuncStr);
				}
			}
		}
	} // prExecutePOSTCall
	

	const guardarAccionFallidaParaSubirlaDespues = accionJSON => {
		console.log('guardar accion');
		accionJSON.idRndm = getRandomNumber(1000);
		let actions = localStorage.getItem('actionsPendingToUpload');
		if (actions) 
			actions = JSON.parse(actions);
		else 
			actions = [];
		actions = [...actions, accionJSON];
		console.log(actions);
		localStorage.setItem('actionsPendingToUpload', JSON.stringify(actions));
		document.location.href = "index.html"
	}

	const getRandomNumber = max => {
		return Math.floor(Math.random() * Math.floor(max));
	}

	const eliminarAccionFallidaPorqueSeCompleto = id => {
		let actions = localStorage.getItem('actionsPendingToUpload');
		if (actions) 
			actions = JSON.parse(actions);
		else 
			actions = [];
		actions = actions.filter( action => action.idRndm !==  id);
		localStorage.setItem('actionsPendingToUpload', JSON.stringify(actions));
	}